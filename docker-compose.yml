version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    container_name: app
    profiles:
      - dev
      - prod
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - '${APP_HTTP_PORT:-}:3000'
    volumes:
      - .:/usr/src/app
    networks:
      - app_net
      - redis_net
      - elk_net

  # Infrastructure

  setup:
    profiles:
      - setup
    build:
      context: ./elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./elk/setup/lib.sh:/lib.sh:ro,Z
      - ./elk/setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk_net
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: ./elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    profiles:
      - setup
      - dev
      - prod
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elk_vol:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    env_file:
      - .env
    networks:
      - elk_net
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -u ${ELASTIC_SEARCH_USER}:${ELASTIC_SEARCH_PASSWORD} http://localhost:9200/_cluster/health || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  logstash:
    build:
      context: ./elk/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    profiles:
      - prod
    restart: unless-stopped
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk_net
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    build:
      context: elk/extensions/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    container_name: filebeat
    profiles:
      - prod
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./elk/extensions/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - /var/lib/docker/containers:/var/lib/docker/containers:ro,Z
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
      - logstash
    networks:
      - elk_net

  redis:
    image: redis
    container_name: redis
    profiles:
      - dev
      - prod
    restart: always
    env_file:
      - .env
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 2s
      timeout: 3s
      retries: 5
    ports:
      - '${REDIS_PORT:-}:6379'
    volumes:
      - redis_vol:/data
    networks:
      - redis_net

  # Utility
  kibana:
    build:
      context: ./elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    profiles:
      - dev
      - prod
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy

volumes:
  redis_vol:
    name: redis_vol
  elk_vol:
    name: elk_vol
    external: true

networks:
  app_net:
    name: app_net
  redis_net:
    name: redis_net
    driver: bridge
  elk_net:
    name: elk_net
    driver: bridge
